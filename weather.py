# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VafoUf7I7bcpdRtLoiAbeQbD7i4Z5D88
"""

data = pd.read_csv("/content/seattle-weather (2).csv")
data.head(6)

data.tail(10)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data.info()

data.isnull().sum()

data['date'] = pd.to_datetime(data['date'])
data.nunique()

plt.figure(figsize=(10,5))
#sns.set_theme()
sns.countplot(x = 'weather',data = data,palette="ch:start=.2,rot=-.3")
plt.xlabel("weather",fontweight='bold',size=10)
plt.ylabel("Count",fontweight='bold',size=10)
plt.show()

def LABEL_ENCODING(c1):
    from sklearn import preprocessing
    label_encoder = preprocessing.LabelEncoder()
    data[c1]= label_encoder.fit_transform(data[c1])
    data[c1].unique()
LABEL_ENCODING("weather")
data

data = data.drop('date',axis=1)

x = data.drop('weather',axis=1)
y = data['weather']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

y_pred

print(list(y_test))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test,y_pred,labels=[0,1,2,3,4])
#disp = ConfusionMatrixDisplay(confusion_matrix=cm).
#disp.plot()
"""
[[  0   3   0  28   0]
 [  0 130   0  25   0]
 [  0   6   0   0   0]
 [  0  14   0 149   0]
 [  0   0   0   0   0]]
"""
print(cm)



acc1 = accuracy_score(y_test, y_pred)
print(f"Accuracy score: {acc1}")

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X_train, y_train)